{"version":3,"sources":["useAutoPlay.ts"],"names":["useAutoPlay","opts","autoPlay","autoPlayReverse","autoPlayInterval","autoPlayDelay","carouselController","timer","React","useRef","pause","useCallback","current","clearInterval","run","setInterval","prev","next","useEffect"],"mappings":";;;;;;;AAAA;;;;;;AAGO,SAASA,WAAT,CAAqBC,IAArB,EAMJ;AACC,QAAM;AACFC,IAAAA,QAAQ,GAAG,KADT;AAEFC,IAAAA,eAAe,GAAG,KAFhB;AAGFC,IAAAA,gBAHE;AAIFC,IAAAA,aAJE;AAKFC,IAAAA;AALE,MAMFL,IANJ;AAQA,QAAMM,KAAK,GAAGC,KAAK,CAACC,MAAN,EAAd;AAEA,QAAMC,KAAK,GAAGF,KAAK,CAACG,WAAN,CAAkB,MAAM;AAClCJ,IAAAA,KAAK,CAACK,OAAN,IAAiBC,aAAa,CAACN,KAAK,CAACK,OAAP,CAA9B;AACH,GAFa,EAEX,EAFW,CAAd;AAIA,QAAME,GAAG,GAAGN,KAAK,CAACG,WAAN,CAAkB,MAAM;AAChC,QAAIJ,KAAK,CAACK,OAAV,EAAmB;AACfF,MAAAA,KAAK;AACR;;AAED,QAAI,CAACR,QAAL,EAAe;AACX;AACH;;AAEDK,IAAAA,KAAK,CAACK,OAAN,GAAgBG,WAAW,CAAC,MAAM;AAC9BZ,MAAAA,eAAe,GACTG,kBAAkB,CAACU,IAAnB,EADS,GAETV,kBAAkB,CAACW,IAAnB,EAFN;AAGH,KAJ0B,EAIxBZ,aAJwB,CAA3B;AAKH,GAdW,EAcT,CACCK,KADD,EAECR,QAFD,EAGCC,eAHD,EAICC,gBAJD,EAKCC,aALD,EAMCC,kBAND,CAdS,CAAZ;AAuBAE,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AAClB,QAAIhB,QAAJ,EAAc;AACVY,MAAAA,GAAG;AACN,KAFD,MAEO;AACHJ,MAAAA,KAAK;AACR;;AACD,WAAOA,KAAP;AACH,GAPD,EAOG,CAACI,GAAD,EAAMJ,KAAN,EAAaR,QAAb,CAPH;AASA,SAAO;AACHY,IAAAA,GADG;AAEHJ,IAAAA;AAFG,GAAP;AAIH","sourcesContent":["import * as React from 'react';\nimport type { ICarouselController } from './useCarouselController';\n\nexport function useAutoPlay(opts: {\n    autoPlay?: boolean;\n    autoPlayInterval?: number;\n    autoPlayReverse?: boolean;\n    carouselController: ICarouselController;\n    autoPlayDelay: number;\n}) {\n    const {\n        autoPlay = false,\n        autoPlayReverse = false,\n        autoPlayInterval,\n        autoPlayDelay,\n        carouselController,\n    } = opts;\n\n    const timer = React.useRef<NodeJS.Timer>();\n\n    const pause = React.useCallback(() => {\n        timer.current && clearInterval(timer.current);\n    }, []);\n\n    const run = React.useCallback(() => {\n        if (timer.current) {\n            pause();\n        }\n\n        if (!autoPlay) {\n            return;\n        }\n\n        timer.current = setInterval(() => {\n            autoPlayReverse\n                ? carouselController.prev()\n                : carouselController.next();\n        }, autoPlayDelay);\n    }, [\n        pause,\n        autoPlay,\n        autoPlayReverse,\n        autoPlayInterval,\n        autoPlayDelay,\n        carouselController,\n    ]);\n\n    React.useEffect(() => {\n        if (autoPlay) {\n            run();\n        } else {\n            pause();\n        }\n        return pause;\n    }, [run, pause, autoPlay]);\n\n    return {\n        run,\n        pause,\n    };\n}\n"]}