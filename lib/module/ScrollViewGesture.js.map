{"version":3,"sources":["ScrollViewGesture.tsx"],"names":["React","StyleSheet","PanGestureHandler","Animated","cancelAnimation","runOnJS","useAnimatedGestureHandler","useAnimatedReaction","useDerivedValue","useSharedValue","withDecay","withTiming","Easing","CTX","IScrollViewGesture","props","vertical","style","data","pagingEnabled","enableSnap","panGestureHandlerProps","loop","infinite","autoPlayInterval","useContext","translation","onScrollBegin","onScrollEnd","size","maxPage","length","isHorizontal","touching","scrollEndTranslation","scrollEndVelocity","_withSpring","useCallback","toValue","onFinished","duration","easing","easeOutQuart","isFinished","endWithSpring","origin","value","velocity","nextPage","Math","round","deceleration","page","velocityPage","finalPage","min","max","resetBoundary","onFinish","activeDecay","panGestureEventHandler","onStart","_","ctx","panOffset","onActive","e","translationX","translationY","panTranslation","boundary","fixed","dynamic","onEnd","velocityX","velocityY","directionStyle","useMemo","styles","contentHorizontal","contentVertical","container","children","ScrollViewGesture","create","flex","overflow","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleProp, StyleSheet, ViewStyle } from 'react-native';\nimport {\n    PanGestureHandler,\n    PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport Animated, {\n    cancelAnimation,\n    runOnJS,\n    useAnimatedGestureHandler,\n    useAnimatedReaction,\n    useDerivedValue,\n    useSharedValue,\n    withDecay,\n    withTiming,\n} from 'react-native-reanimated';\nimport { Easing } from './constants';\nimport { CTX } from './store';\n\ntype GestureContext = {\n    panOffset: number;\n    max: number;\n};\n\ninterface Props {\n    size: number;\n    infinite?: boolean;\n    onScrollEnd?: () => void;\n    onScrollBegin?: () => void;\n    style?: StyleProp<ViewStyle>;\n    translation: Animated.SharedValue<number>;\n}\n\nconst IScrollViewGesture: React.FC<Props> = (props) => {\n    const {\n        props: {\n            vertical,\n            style,\n            data,\n            pagingEnabled,\n            enableSnap,\n            panGestureHandlerProps,\n            loop: infinite,\n            autoPlayInterval,\n        },\n    } = React.useContext(CTX);\n\n    const { translation, onScrollBegin, onScrollEnd, size } = props;\n\n    const maxPage = data.length;\n    const isHorizontal = useDerivedValue(() => !vertical, [vertical]);\n    const touching = useSharedValue(false);\n    const scrollEndTranslation = useSharedValue(0);\n    const scrollEndVelocity = useSharedValue(0);\n\n    const _withSpring = React.useCallback(\n        (toValue: number, onFinished?: () => void) => {\n            'worklet';\n            return withTiming(\n                toValue,\n                {\n                    duration: autoPlayInterval,\n                    easing: Easing.easeOutQuart,\n                },\n                (isFinished) => {\n                    if (isFinished) {\n                        onFinished?.();\n                    }\n                }\n            );\n        },\n        [autoPlayInterval]\n    );\n\n    const endWithSpring = React.useCallback(\n        (onFinished?: () => void) => {\n            'worklet';\n            const origin = translation.value;\n            const velocity = scrollEndVelocity.value;\n            if (!pagingEnabled) {\n                if (enableSnap) {\n                    const nextPage =\n                        Math.round((origin + velocity * 0.4) / size) * size;\n                    translation.value = _withSpring(nextPage, onFinished);\n                    return;\n                }\n                translation.value = withDecay({\n                    velocity,\n                    deceleration: 0.999,\n                });\n                return;\n            }\n            const page = Math.round(-translation.value / size);\n            const velocityPage = Math.round(\n                -(translation.value + scrollEndVelocity.value) / size\n            );\n            let finalPage = Math.min(\n                page + 1,\n                Math.max(page - 1, velocityPage)\n            );\n            if (!infinite) {\n                finalPage = Math.min(maxPage - 1, Math.max(0, finalPage));\n            }\n\n            translation.value = _withSpring(-finalPage * size, onFinished);\n        },\n        [\n            infinite,\n            _withSpring,\n            translation,\n            scrollEndVelocity,\n            size,\n            maxPage,\n            pagingEnabled,\n            enableSnap,\n        ]\n    );\n\n    const resetBoundary = React.useCallback(() => {\n        'worklet';\n        const onFinish = (isFinished: boolean) => {\n            if (isFinished) {\n                touching.value = false;\n                onScrollEnd && runOnJS(onScrollEnd)();\n            }\n        };\n        const activeDecay = () => {\n            touching.value = true;\n            translation.value = withDecay(\n                { velocity: scrollEndVelocity.value },\n                onFinish\n            );\n        };\n\n        if (touching.value) {\n            return;\n        }\n\n        if (translation.value > 0) {\n            if (scrollEndTranslation.value < 0) {\n                activeDecay();\n                return;\n            }\n            if (!infinite) {\n                translation.value = _withSpring(0);\n                return;\n            }\n        }\n\n        if (translation.value < -((maxPage - 1) * size)) {\n            if (scrollEndTranslation.value > 0) {\n                activeDecay();\n                return;\n            }\n            if (!infinite) {\n                translation.value = _withSpring(-((maxPage - 1) * size));\n                return;\n            }\n        }\n    }, [\n        infinite,\n        touching,\n        _withSpring,\n        translation,\n        scrollEndTranslation,\n        scrollEndVelocity,\n        onScrollEnd,\n        maxPage,\n        size,\n    ]);\n\n    useAnimatedReaction(\n        () => translation.value,\n        () => {\n            if (!pagingEnabled) {\n                resetBoundary();\n            }\n        },\n        [pagingEnabled]\n    );\n\n    const panGestureEventHandler = useAnimatedGestureHandler<\n        PanGestureHandlerGestureEvent,\n        GestureContext\n    >(\n        {\n            onStart: (_, ctx) => {\n                touching.value = true;\n                cancelAnimation(translation);\n                onScrollBegin && runOnJS(onScrollBegin)();\n                ctx.max = (maxPage - 1) * size;\n                ctx.panOffset = translation.value;\n            },\n            onActive: (e, ctx) => {\n                touching.value = true;\n                const { translationX, translationY } = e;\n                let panTranslation = isHorizontal.value\n                    ? translationX\n                    : translationY;\n\n                if (\n                    !infinite &&\n                    (translation.value > 0 || translation.value < -ctx.max)\n                ) {\n                    const boundary = translation.value > 0 ? 0 : -ctx.max;\n                    const fixed = boundary - ctx.panOffset;\n                    const dynamic = panTranslation - fixed;\n                    translation.value = boundary + dynamic * 0.5;\n                    return;\n                }\n\n                translation.value = ctx.panOffset + panTranslation;\n            },\n            onEnd: (e) => {\n                const { velocityX, velocityY, translationX, translationY } = e;\n                scrollEndVelocity.value = isHorizontal.value\n                    ? velocityX\n                    : velocityY;\n                scrollEndTranslation.value = isHorizontal.value\n                    ? translationX\n                    : translationY;\n\n                endWithSpring(() => onScrollEnd && runOnJS(onScrollEnd)());\n\n                if (!infinite) {\n                    touching.value = false;\n                }\n            },\n        },\n        [pagingEnabled, isHorizontal.value, infinite, maxPage, size, enableSnap]\n    );\n\n    const directionStyle = React.useMemo(() => {\n        return vertical ? styles.contentHorizontal : styles.contentVertical;\n    }, [vertical]);\n\n    return (\n        <Animated.View style={[styles.container, directionStyle, style]}>\n            <PanGestureHandler\n                {...panGestureHandlerProps}\n                onGestureEvent={panGestureEventHandler}\n            >\n                {props.children}\n            </PanGestureHandler>\n        </Animated.View>\n    );\n};\n\nexport const ScrollViewGesture = IScrollViewGesture;\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        overflow: 'hidden',\n    },\n    contentVertical: {\n        flexDirection: 'column',\n    },\n    contentHorizontal: {\n        flexDirection: 'row',\n    },\n});\n"]}